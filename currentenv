#include "shell.h"

#define MAX_COMMAND_LENGTH 100
#define MAX_ARGUMENTS 10

extern char **environ;

void printEnvironment() {
    char **env = environ;
    while (*env) {
        printf("%s\n", *env);
        env++;
    }
}

int main() {
    char command[MAX_COMMAND_LENGTH];
    char prompt[] = "simple_shell> ";

    while (1) {
        printf("%s", prompt);

        if (fgets(command, sizeof(command), stdin) == NULL) {
            printf("\n");
            break;
        }

        // Remove the newline character at the end of the command
        command[strcspn(command, "\n")] = '\0';

        // Tokenize the command into arguments
        char* arguments[MAX_ARGUMENTS];
        char* token = strtok(command, " ");
        int argCount = 0;

        while (token != NULL && argCount < MAX_ARGUMENTS - 1) {
            arguments[argCount++] = token;
            token = strtok(NULL, " ");
        }

        arguments[argCount] = NULL;

        // Check if the command is the exit built-in
        if (strcmp(arguments[0], "exit") == 0) {
            break;
        }

        // Check if the command is the env built-in
        if (strcmp(arguments[0], "env") == 0) {
            printEnvironment();
            continue;
        }

        // Check if the command exists in the PATH
        char* path = getenv("PATH");
        char* pathToken = strtok(path, ":");

        while (pathToken != NULL) {
            char commandPath[MAX_COMMAND_LENGTH];
            snprintf(commandPath, sizeof(commandPath), "%s/%s", pathToken, arguments[0]);

            if (access(commandPath, X_OK) == 0) {
                // Command exists, fork a child process
                pid_t pid = fork();

                if (pid < 0) {
                    perror("fork");
                    exit(EXIT_FAILURE);
                } else if (pid == 0) {
                    // Child process

                    // Execute the command
                    if (execv(commandPath, arguments) == -1) {
                        perror("execv");
                        exit(EXIT_FAILURE);
                    }
                } else {
                    // Parent process

                    // Wait for the child process to finish
                    int status;
                    waitpid(pid, &status, 0);
                }

                break;
            }

            pathToken = strtok(NULL,
